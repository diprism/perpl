{- Test all combinations of types -}

-- arrows
define x001: () -> () = \x: (). x;
define x002: () -> () -> () = \x: (). \y: (). ();
define x003: () -> (() -> ()) = \x: (). \y: (). ();
define x004: (() -> ()) -> () = \x: () -> (). ();
-- products
-- bug: no way to write 1-ary multiplicative tuples or their types
define x005: () = ();
define x006: ((), ()) = ((), ());
define x007: ((), (), ()) = ((), (), ());
define x008: <> = <>;
define x009: <()> = <()>;
define x010: <(), ()> = <(), ()>;
define x011: <(), (), ()> = <(), (), ()>;
define x012: <((), ()), ()> = <((), ()), ()>;
define x013: ((), <(), ()>) = ((), <(), ()>);
-- products and arrows
define x014: ((), ()) -> () = \x: ((), ()). ();
define x015: ((), (() -> ())) = ((), \x: (). ());
define x016: () -> ((), ()) = \x: () . ((), ());
define x017: ((() -> ()), ()) = (\x: (). (), ());
-- datatypes       
data Tree = Leaf | Unary Tree | Binary Tree Tree;
define x018: Tree = Binary (Unary Leaf) (Leaf);

let x = (
  x001, x002, x003, x004, x005, x006, x007, x008, x009, x010,
  x011, x012, x013, x014, x015, x016, x017, x018
) in ()
