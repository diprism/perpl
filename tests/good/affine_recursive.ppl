-- Run using:
-- ./compiler.exe -O0 -e -c tests/good/affine_recursive.ppl

data List a = Nil | Cons a (List a);

-- Consume List (and do nothing with it).
-- Should become:
-- define consume = \xs. case xs.1 of Nil -> () | Cons x xs -> consume xs;
define consume = \xs. case xs of Nil -> () | Cons x xs -> consume xs;

-- Construct List in environment with free variable f.
-- Should become:
-- define construct = let f = <\x. x, ()> in let _c = Cons (factor 0.5 in f) <Nil, ()> in let l = <_c, f.2> in consume l;
define construct = let f = \x. x in let l = Cons (factor 0.5 in f) Nil in consume l;

-- Construct and discard List.
-- Should become:
-- define discard = let l = <Cons () <Nil, ()>, ()> in let () = l.2 in ();
define discard = let l = Cons () Nil in ();

(construct, discard)
