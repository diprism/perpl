data Tree =
    Leaf
  | Node Children;

data Children =
    Nil
  | Cons Tree Children;

define produce_tree: Tree =
  if sample uniform : Bool then
    Leaf
  else
    Node produce_children;

define produce_children: Children =
  if sample uniform : Bool then
    Nil
  else
    Cons produce_tree produce_children;

define consume_tree: Tree -> Unit = \t: Tree.
  case t of
      Leaf -> ()
    | Node c -> consume_children c;

define consume_children: Children -> Unit = \c: Children.
  case c of
      Nil -> ()
    | Cons t c -> (let _ = consume_tree t in consume_children c);

consume_tree produce_tree

