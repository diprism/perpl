data Symbol = Sym0 | Sym1;
data State = q1 | q2 | q3;
data String = Nil | Cons Symbol String;

extern transition : State -> Symbol * State;
extern transition' : Symbol * State -> State;
extern in_accept : State -> Bool;
extern in_accept' : State -> Bool;
extern q0 : State;
extern q0' : State;

define gen : State -> String = \ q. if in_accept q
  then Nil
  else (let (w, x) = transition q in Cons w (gen x));

define rec : State -> String -> Bool =
  \ q'. \ ws. case ws of
    | Nil -> in_accept' q'
    | Cons w ws -> rec (transition' (w, q')) ws;

rec q0' (gen q0)