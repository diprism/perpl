-- Language: { 0^{2i}1^{2j+1} | i and j are integers}

data Symbol = Sym0 | Sym1;
data State = q0e | q0o | q1e | q1o | sink;
data String = Nil | Cons Symbol String;

define transition : Symbol -> State -> State = \ s. \ q. case s of
  | Sym0 -> (case q of
    | q0e -> q0o
    | q0o -> q0e
    | q1e -> sink
    | q1o -> sink
    | sink -> sink
    )
  | Sym1 -> (case q of
    | q0e -> q1o
    | q0o -> sink
    | q1e -> q1o
    | q1o -> q1e
    | sink -> sink
    );

define in_accept : State -> Bool = \ q. case q of
  | q0e -> False | q0o -> False | q1e -> False | q1o -> True | sink -> False;

define q0 = q0e;

define rec : State -> String -> Bool =
  \ q. \ ws. case ws of
    | Nil -> in_accept q
    | Cons w ws -> rec (transition w q) ws;

-- Should get accepted, so [0, 1]
define string1 = Cons Sym0 (Cons Sym0 (Cons Sym1 (Cons Sym1 (Cons Sym1 Nil))));
-- Should get rejected, so [1, 0]
define string2 = Cons Sym0 (Cons Sym0 (Cons Sym1 (Cons Sym1 (Cons Sym0 Nil))));
-- Should get rejected, so [1, 0]
define string3 = Cons Sym0 (Cons Sym0 (Cons Sym1 (Cons Sym1 Nil)));

rec q0 string1