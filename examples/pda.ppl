-- A pushdown automaton recognizing the language { 0^n 1^n | n >= 0 }

data InputSymbol = Sym0 | Sym1;
data StackSymbol = Pound | Dollar;
data State = q0s | q1s | sink;
data String a = Nil | Cons a (String a);
data Action = Pop State | Push State StackSymbol;

define transition' : State -> InputSymbol -> StackSymbol -> Action =
  \ q. \ w. \ z. case q of
    | q0s -> (case w of
      | Sym0 -> Push q0s Pound
      | Sym1 -> Pop (case z of Pound -> q1s | Dollar -> sink))
    | q1s -> (case w of
      | Sym0 -> Pop sink
      | Sym1 -> Pop (case z of Pound -> q1s | Dollar -> sink))
    | sink -> Pop sink;

define in_accept' : State -> StackSymbol -> Bool =
  \ q. \ z. case q of
    | q0s -> False
    | q1s -> (case z of Pound -> False | Dollar -> True)
    | sink -> False;

define rec_pda : State -> String InputSymbol -> String StackSymbol -> Bool =
  \ q'. \ ws. \ zs. case zs of
    | Nil -> False
    | Cons z zs -> (case ws of
      | Nil -> in_accept' q' z
      | Cons w ws -> (case transition' q' w z of
        | Pop r' -> rec_pda r' ws zs
        | Push r' znew -> rec_pda r' ws (Cons znew (Cons z zs))
      )
    );

define start_state = q0s;
define w0 = Cons Sym0 (Cons Sym0 (Cons Sym1 (Cons Sym1 Nil)));
define start_stack = Cons Dollar Nil;

rec_pda start_state w0 start_stack;