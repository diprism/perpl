data Nat = Zero | Succ Nat;

define even = \ n. case n of
  | Zero -> True
  | Succ n' -> (case n' of
    | Zero -> False
    | Succ n'' -> even n''
  );

-- Can't defun because Nat occurs in the types of the free vars of a Nat ctor
--define no_defun = \ n. Succ n;

-- Can't refun because Nat occurs in the return type of a Nat case-of
--define no_refun1 = \ n. case n of Zero -> Zero | Succ n' -> Succ Zero;

-- Can't refun because Nat occurs in the type of a free var in one of the cases
--define no_refun2 = \ m. \ n. case m of Zero -> False | Succ m' -> even n;

-- If you comment either no_defun or both no_refun1 and no_refun2, then this file compiles

even (Succ Zero);