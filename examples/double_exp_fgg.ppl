-- Produces an FGG with a number of rules linear w.r.t which bigN is used,
-- but the FGG is double exponential in size because (I believe) the number
-- of values in each successive Nat instance is O(2^{2^n}).

-- Reconstruct a Nat (yields the same number, but with any tag)
define reconstruct = \n. case n of Zero -> Zero | Succ n -> Succ (reconstruct n);

-- Tail-recursive addition
define add = \m. \n. case m of Zero -> reconstruct n | Succ m -> add m (Succ n);

-- Creates another Nat instance i+1, which
-- refunctionalizes to contain the type (i -> i)
define pluszero = \m. add m Zero;

-- For each of these, the FGG's domains have the following total number of values:
define big0 = Zero;          -- Σ |values| = 4
define big1 = pluszero big0; -- Σ |values| = 15
define big2 = pluszero big1; -- Σ |values| = 40
define big3 = pluszero big2; -- Σ |values| = 135
define big4 = pluszero big3; -- Σ |values| = 1420
define big5 = pluszero big4; -- Σ |values| = 237135
define big6 = pluszero big5; -- Σ |values| = hangs
define big7 = pluszero big6; -- Σ |values| = ...
define big8 = pluszero big7; -- Σ |values| = ...
define big9 = pluszero big8; -- Σ |values| = ...

let _ = big5 in ()
