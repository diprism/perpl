data Nat = zero | succ Nat;

define not =
  \ b. if b then False else True;
define and =
  \ a. \ b. if a then b else False;

define even =
  \ n. case n of zero -> True | succ n' -> not (even n');

define iszero =
  \ n. case n of zero -> True | succ n' -> False;

--define bothzero_worse =
--  \ m. \ n. case m of
--    | zero -> iszero n
--    | succ m' -> False;

define bothzero_better =
  \ m. \ n. let iszero_n = iszero n in
    case m of
      | zero -> iszero_n
      | succ m' -> False;

define dont_defun_nat = \ n. succ n;

bothzero_better zero (succ zero);

-- correct: [1.0, 0.0]
