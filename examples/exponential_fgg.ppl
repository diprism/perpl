define half1 n =
  case n of
    | Zero -> Zero
    | Succ n -> case n of
      | Zero -> Zero
      | Succ n -> Succ (half1 n);

define half2 n = half1 (half1 n);
define half4 n = half2 (half2 n);
define half8 n = half4 (half4 n);
define half16 n = half8 (half8 n);
define half32 n = half16 (half16 n);
define half64 n = half32 (half32 n);
define half128 n = half64 (half64 n);
define half256 n = half128 (half128 n);
define half512 n = half256 (half256 n);
define half1024 n = half512 (half512 n);

-- Note: eta-expanding to \m. Succ m significantly reduces FGG size!?
-- I believe this is because it essentially disables the affine-to-linear
-- optimization that assumes global function calls always receive all args,
-- i.e. instead of (let <y', _> = y in y' Zero) below, we simply get (y Zero)
define y m = Succ m;

let _ = half? (y Zero) in ();