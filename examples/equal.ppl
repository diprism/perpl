data Terminal = A;
data Nonterminal = S;
data RHS = Unary Terminal | Binary Nonterminal Nonterminal;
data String = Nil | Cons Terminal String;
extern production: Nonterminal -> RHS;

define gen: Nonterminal -> String -> String = \x: Nonterminal. \acc: String.
  case production x of
    | Unary a -> Cons a acc
    | Binary y z -> gen y (gen z acc);

define equal: String -> String -> Bool = \xs: String. \ys: String.
  case xs of
    | Nil -> (case ys of Nil -> True | Cons _ _ -> False)
    | Cons x xs -> (case ys of
      | Nil -> False
      | Cons y ys -> if x == y then equal xs ys else False);

equal (gen S Nil) (Cons A (Cons A (Cons A Nil)))
